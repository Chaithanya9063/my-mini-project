''' ____________________________________________________PYTHON MINI PROJECT_________________________________________________________________
                                                                                               TOPIC NO: 20
                                                    Contributors: Balla Chaithanya Sai, Soumyadip Roy, Rishav Raj                                                                                '''


def OddOrderSquare(n):
    # 2-D array with all
    # slots set to 0
    magicSquare = [[0 for x in range(n)]
                   for y in range(n)]

    # initialize position of 1
    i = n // 2
    j = n - 1

    # Fill the magic square
    # by placing values
    num = 1
    while num <= (n * n):
        if i == -1 and j == n:  # 3rd condition
            j = n - 2
            i = 0
        else:

            # next number goes out of
            # right side of square
            if j == n:
                j = 0

            # next number goes
            # out of upper side
            if i < 0:
                i = n - 1

        if magicSquare[int(i)][int(j)]:  # 2nd condition
            j = j - 2
            i = i + 1
            continue
        else:
            magicSquare[int(i)][int(j)] = num
            num = num + 1

        j = j + 1
        i = i - 1  # 1st condition

    # Printing magic square

    for i in range(0, n):
        for j in range(0, n):
            print('%2d ' % (magicSquare[i][j]),
                  end='')

            # To display output
            # in matrix form
            if j == n - 1:
                print()


def EvenOrderSquare(n):
    # 2-D matrix with all entries as 0
    arr = [[(n * y) + x + 1 for x in range(n)] for y in range(n)]

    # Change value of array elements at fix location
    # as per the rule (n*n+1)-arr[i][[j]

    # Corners of order (n/4)*(n/4)
    # Top left corner
    for i in range(0, n // 4):
        for j in range(0, n // 4):
            arr[i][j] = (n * n + 1) - arr[i][j];

    # Top right corner
    for i in range(0, n // 4):
        for j in range(3 * (n // 4), n):
            arr[i][j] = (n * n + 1) - arr[i][j];

    # Bottom Left corner
    for i in range(3 * (n // 4), n):
        for j in range(0, n // 4):
            arr[i][j] = (n * n + 1) - arr[i][j];

    # Bottom Right corner
    for i in range(3 * (n // 4), n):
        for j in range(3 * (n // 4), n):
            arr[i][j] = (n * n + 1) - arr[i][j];

    # Centre of matrix,order (n/2)*(n/2)
    for i in range(n // 4, 3 * (n // 4)):
        for j in range(n // 4, 3 * (n // 4)):
            arr[i][j] = (n * n + 1) - arr[i][j];

    # Printing the square
    for i in range(n):
        for j in range(n):
            print('%2d ' % (arr[i][j]), end=" ")
        print()


# Driver Program
n = int(input())
if n % 2 == 0:
    EvenOrderSquare(n)
else:
    OddOrderSquare(n)
'''________________________________________________________________ THE END ______________________________________________________________________'''

